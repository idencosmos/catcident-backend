services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "
      python manage.py migrate &&
      python manage.py loaddata fixtures/initial_data.json &&
      python manage.py runserver 0.0.0.0:8000
      "
    env_file:
      - .env # 공통 환경 변수 파일
      - .env.dev # 개발 환경 변수 파일
    environment:
      DJANGO_ENV: development
      DJANGO_SETTINGS_MODULE: config.settings.development # 개발용 settings 모듈 사용
    volumes:
      - ./:/app # 소스 코드 변경 사항 실시간 반영 (Live Reload)
    depends_on:
      - db
      - redis
    networks:
      - internal
      - caddy

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data/
    networks:
      - internal

  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - internal

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A config worker -l info
    env_file:
      - .env
      - .env.dev
    environment:
      DJANGO_ENV: development
      DJANGO_SETTINGS_MODULE: config.settings.development
    volumes:
      - ./:/app
    depends_on:
      - api
      - redis
    networks:
      - internal

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A config beat -l info
    env_file:
      - .env
      - .env.dev
    environment:
      DJANGO_ENV: development
      DJANGO_SETTINGS_MODULE: config.settings.development
    volumes:
      - ./:/app
    depends_on:
      - redis
    networks:
      - internal

volumes:
  db_data:
  redis_data:

networks:
  internal:
    driver: bridge
  caddy:
    external: true
